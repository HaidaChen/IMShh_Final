<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.douniu.imshh.sys.dao.IRoleDao">
    <resultMap type="Role" id="rolemap">
        <result property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="buildIn" column="buildIn"/>
        <result property="status" column="status"/>
        <result property="remark" column="remark"/>
        <collection property="authorities" ofType="Authority">
        	<id property="id" column="a_id"/>
        	<result property="name" column="a_name"/>
        	<result property="parentId" column="a_parentId"/>
        	<result property="action" column="a_action"/>
        	<result property="dependents" column="a_dependents"/>
        	<result property="remark" column="a_remark"/>
        </collection>
    </resultMap>
       
    <select id="query" parameterType="SystemFilter" resultMap="rolemap">
        select r.*, rwa.* 
          from t_role r 
          left join (select ra.*,
                            a.id as a_id,
                            a.name as a_name,
                            a.parentId as a_parentId,
                            a.action as a_action,
                            a.dependents as a_dependents,
                            a.remark as a_remark
                       from t_role_authority ra, 
                            t_authority a 
                      where ra.authorityId = a.id)rwa 
            on r.id = rwa.roleId
         where r.status = 1  
         <if test="roleName != null and roleName != ''">
           and r.name like #{roleName}
         </if>      
          order by r.id
    </select>
    
    <select id="queryByUser" parameterType="String" resultMap="rolemap">
    	select r.*, rwa.* 
          from (select m.* from t_role m, t_user_role b where status = 1 and m.id = b.roleId and b.userId = #{userId})r
          left join (select ra.*,
                            a.id as a_id,
                            a.name as a_name,
                            a.parentId as a_parentId,
                            a.action as a_action,
                            a.dependents as a_dependents,
                            a.remark as a_remark
                       from t_role_authority ra, 
                            t_authority a 
                      where ra.authorityId = a.id)rwa 
            on r.id = rwa.roleId
         where r.status = 1 
          order by r.id
    </select>
    
    <select id="findById" parameterType="String" resultMap="rolemap">
        select r.*, rwa.* 
          from t_role r
          left join (select ra.*,
                            a.id as a_id,
                            a.name as a_name,
                            a.parentId as a_parentId,
                            a.action as a_action,
                            a.dependents as a_dependents,
                            a.remark as a_remark
                       from t_role_authority ra, 
                            t_authority a 
                      where ra.authorityId = a.id)rwa 
            on r.id = rwa.roleId
         where r.status = 1 
           and r.id = #{id}
    </select>
    
    <insert id="insert" parameterType="Role">
        insert into t_role(id, name, remark, modifydate, status) 
          values(#{id}, #{name}, #{remark}, sysdate(), '1')
    </insert> 
    
    <update id="update" parameterType="User">
        update t_role set 
          name = #{name},  
          remark = #{remark},
          modifydate = sysdate()
    where buildIn != '1' and id = #{id}
    </update>
    
    <update id="delete" parameterType="String">
        update t_role set 
          status = '0',
          modifydate = sysdate()
        where buildIn != '1' and id = #{id}
    </update>
    
    <delete id="deleteAuthorityRelation" parameterType="String">
    	delete from t_role_authority where roleId = #{roleId}
    </delete>
    
    <insert id="addAuthorityRelation" parameterType="java.util.List">        
        insert into t_role_authority(roleid, authorityId) 
             values
             <foreach collection="list" item="ra" index="index" separator=",">
                 (#{ra.roleId}, #{ra.authorityId})
             </foreach>
    </insert>
</mapper>